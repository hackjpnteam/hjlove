// „Éó„É≠„Éï„Ç£„Éº„É´„Éö„Éº„Ç∏ÁîüÊàêÊ©üËÉΩ

class ProfileGenerator {
    constructor() {
        this.profiles = this.loadProfiles();
    }

    // Êó¢Â≠ò„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´„ÇíË™≠„ÅøËæº„Åø
    loadProfiles() {
        try {
            const stored = localStorage.getItem('profiles');
            return stored ? JSON.parse(stored) : [];
        } catch (error) {
            console.error('„Éó„É≠„Éï„Ç£„Éº„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            return [];
        }
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´„Çí‰øùÂ≠ò
    saveProfiles() {
        try {
            localStorage.setItem('profiles', JSON.stringify(this.profiles));
        } catch (error) {
            console.error('„Éó„É≠„Éï„Ç£„Éº„É´‰øùÂ≠ò„Ç®„É©„Éº:', error);
        }
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´ID„ÇíÁîüÊàê
    generateProfileId(name) {
        const baseId = name.toLowerCase()
            .replace(/\s+/g, '-')
            .replace(/[^a-z0-9-]/g, '');
        
        // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
        let id = baseId;
        let counter = 1;
        while (this.profiles.find(p => p.id === id)) {
            id = `${baseId}-${counter}`;
            counter++;
        }
        
        return id;
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´HTMLÁîüÊàê
    generateProfileHTML(profileData) {
        const { id, name, englishName, age, location, occupation, bio, skills } = profileData;
        
        const englishNameDisplay = englishName ? `<span class="hero-subtitle">${englishName}</span>` : '';
        const ageDisplay = age ? `${age}Ê≠≥` : '';
        const locationDisplay = location ? ` ‚Ä¢ ${location}` : '';
        const occupationFull = `${occupation}${ageDisplay}${locationDisplay}`;

        // „Çπ„Ç≠„É´„Ç´„Éº„Éâ„ÇíÁîüÊàê
        const skillCards = skills && skills.length > 0 ? skills.map(skill => `
            <div class="about-card">
                <div class="about-icon">üí°</div>
                <h3>${skill}</h3>
                <p>Â∞ÇÈñÄ„Çπ„Ç≠„É´„Å®„Åó„Å¶ÁøíÂæó</p>
            </div>
        `).join('') : '';

        // „Éê„Ç§„Ç™„Ç∞„É©„Éï„Ç£„Éº„ÇíÊÆµËêΩ„Å´ÂàÜÂâ≤
        const bioSentences = bio.split(/[„ÄÇÔºéÔºÅÔºü\n]/).filter(s => s.trim().length > 0);
        const bioParagraphs = bioSentences.map(sentence => `<p class="bio-text">${sentence.trim()}„ÄÇ</p>`).join('');

        return `<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${name} - „Éó„É≠„Éï„Ç£„Éº„É´</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Noto+Sans+JP:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #667eea;
            --primary-dark: #5a67d8;
            --secondary: #6B7280;
            --text-primary: #111827;
            --text-secondary: #6B7280;
            --bg-light: #f8fafc;
            --bg-white: #FFFFFF;
            --border: #e2e8f0;
            --gradient-1: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-2: linear-gradient(135deg, #667eea 0%, #5a67d8 100%);
        }

        body {
            font-family: 'Noto Sans JP', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .navbar {
            position: fixed;
            top: 0;
            width: 100%;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--border);
            z-index: 1000;
            padding: 1rem 0;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-brand {
            font-weight: 800;
            font-size: 1.5rem;
            background: var(--gradient-2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .nav-menu {
            display: flex;
            gap: 2rem;
        }

        .nav-link {
            color: var(--text-secondary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .nav-link:hover {
            color: var(--primary);
        }

        .hero {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            padding: 6rem 2rem 4rem;
            overflow: hidden;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .hero-content {
            max-width: 800px;
            text-align: center;
            z-index: 2;
            position: relative;
            color: white;
        }

        .hero-badge {
            display: inline-block;
            padding: 0.5rem 1rem;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 50px;
            font-weight: 600;
            font-size: 0.875rem;
            margin-bottom: 1.5rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            backdrop-filter: blur(10px);
        }

        .hero-title {
            font-size: clamp(3rem, 8vw, 5rem);
            font-weight: 800;
            margin-bottom: 1rem;
            line-height: 1.1;
            color: white;
        }

        .hero-subtitle {
            display: block;
            font-size: 0.5em;
            font-weight: 300;
            margin-top: 0.5rem;
            opacity: 0.9;
        }

        .hero-description {
            font-size: 1.25rem;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 2rem;
            font-weight: 400;
        }

        .hero-cta {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .btn {
            padding: 0.875rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            display: inline-block;
            font-size: 1rem;
        }

        .btn-primary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .btn-primary:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: transparent;
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .btn-secondary:hover {
            border-color: rgba(255, 255, 255, 0.6);
            transform: translateY(-2px);
        }

        .section {
            padding: 5rem 2rem;
        }

        .section-alt {
            background: var(--bg-light);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .section-title {
            font-size: 2.5rem;
            font-weight: 800;
            text-align: center;
            margin-bottom: 3rem;
            background: var(--gradient-2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .about-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 4rem;
        }

        .about-card {
            background: white;
            padding: 2rem;
            border-radius: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            text-align: center;
        }

        .about-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
        }

        .about-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .about-card h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }

        .about-card p {
            color: var(--text-secondary);
            line-height: 1.6;
        }

        .bio-section {
            background: white;
            padding: 3rem;
            border-radius: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }

        .bio-title {
            font-size: 1.75rem;
            margin-bottom: 1.5rem;
            color: var(--text-primary);
        }

        .bio-text {
            color: var(--text-secondary);
            line-height: 1.8;
            margin-bottom: 1.5rem;
            font-size: 1.1rem;
        }

        .contact-content {
            max-width: 600px;
            margin: 0 auto;
            text-align: center;
        }

        .contact-text {
            font-size: 1.25rem;
            color: var(--text-secondary);
            margin-bottom: 2rem;
            line-height: 1.8;
        }

        .contact-links {
            display: flex;
            gap: 1.5rem;
            justify-content: center;
        }

        .contact-link {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 1rem 1.5rem;
            background: white;
            border: 2px solid var(--border);
            border-radius: 12px;
            text-decoration: none;
            color: var(--text-primary);
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .contact-link:hover {
            border-color: var(--primary);
            color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
        }

        .contact-icon {
            font-size: 1.25rem;
        }

        .footer {
            background: var(--text-primary);
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .back-link {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px 20px;
            border-radius: 25px;
            text-decoration: none;
            color: var(--primary);
            font-weight: 600;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            z-index: 1001;
        }

        .back-link:hover {
            background: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        @media (max-width: 768px) {
            .nav-menu {
                display: none;
            }
            
            .hero-cta {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                max-width: 300px;
            }
            
            .contact-links {
                flex-direction: column;
                align-items: center;
            }
            
            .contact-link {
                width: 100%;
                max-width: 300px;
            }
        }
    </style>
</head>
<body>
    <a href="../index.html" class="back-link">‚Üê ‰∏ÄË¶ß„Å´Êàª„Çã</a>

    <section class="hero">
        <div class="hero-content">
            <div class="hero-badge">${occupation.split(' ')[0]}</div>
            <h1 class="hero-title">${name}${englishNameDisplay}</h1>
            <p class="hero-description">${occupationFull}</p>
            <div class="hero-cta">
                <a href="#about" class="btn btn-primary">Ë©≥„Åó„ÅèË¶ã„Çã</a>
                <a href="#contact" class="btn btn-secondary">„ÅäÂïè„ÅÑÂêà„Çè„Åõ</a>
            </div>
        </div>
    </section>

    <section id="about" class="section">
        <div class="container">
            <h2 class="section-title">ÁßÅ„Å´„Å§„ÅÑ„Å¶</h2>
            <div class="about-grid">
                ${skillCards || `
                <div class="about-card">
                    <div class="about-icon">üë§</div>
                    <h3>„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´</h3>
                    <p>${occupation}„Å®„Åó„Å¶Ê¥ªÂãï„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</p>
                </div>
                `}
            </div>
            <div class="bio-section">
                <h3 class="bio-title">„Éó„É≠„Éï„Ç£„Éº„É´</h3>
                ${bioParagraphs}
            </div>
        </div>
    </section>

    <section id="contact" class="section section-alt">
        <div class="container">
            <h2 class="section-title">„ÅäÂïè„ÅÑÂêà„Çè„Åõ</h2>
            <div class="contact-content">
                <p class="contact-text">
                    „ÅîË≥™Âïè„ÇÑ„Åä‰ªï‰∫ã„ÅÆ„Åî‰æùÈ†º„Å™„Å©„ÄÅ„ÅäÊ∞óËªΩ„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ
                    „ÅäËøî‰∫ã„Çí„ÅäÂæÖ„Å°„Åó„Å¶„Åä„Çä„Åæ„Åô„ÄÇ
                </p>
                <div class="contact-links">
                    <a href="#" class="contact-link">
                        <span class="contact-icon">üìß</span>
                        „É°„Éº„É´
                    </a>
                    <a href="#" class="contact-link">
                        <span class="contact-icon">üíº</span>
                        LinkedIn
                    </a>
                    <a href="#" class="contact-link">
                        <span class="contact-icon">üê¶</span>
                        Twitter
                    </a>
                </div>
            </div>
        </div>
    </section>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 ${name}. All rights reserved.</p>
        </div>
    </footer>
</body>
</html>`;
    }

    // Êñ∞„Åó„ÅÑ„Éó„É≠„Éï„Ç£„Éº„É´„ÇíËøΩÂä†
    addProfile(profileData) {
        const id = this.generateProfileId(profileData.name);
        
        // ÁèæÂú®„É≠„Ç∞„Ç§„É≥‰∏≠„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
        const currentUser = this.getCurrentUser();
        
        const profile = {
            id,
            ...profileData,
            createdBy: currentUser ? currentUser.email : 'tomura@hackjpn.com',
            createdByName: currentUser ? currentUser.name : 'Êà∏ÊùëÂÖâ',
            createdAt: new Date().toISOString()
        };
        
        this.profiles.push(profile);
        this.saveProfiles();
        
        return profile;
    }

    // ÁèæÂú®„É≠„Ç∞„Ç§„É≥‰∏≠„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
    getCurrentUser() {
        try {
            // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
            const currentUser = localStorage.getItem('currentUser');
            return currentUser ? JSON.parse(currentUser) : null;
        } catch (error) {
            console.error('„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó„Ç®„É©„Éº:', error);
            return null;
        }
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´„ÅÆÁ∑®ÈõÜÊ®©Èôê„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    canEditProfile(profile) {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return false;
        
        // „Éó„É≠„Éï„Ç£„Éº„É´„ÅÆ‰ΩúÊàêËÄÖ„Åã„ÄÅ„Åæ„Åü„ÅØtomura@hackjpn.com„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂ†¥Âêà„ÅØÁ∑®ÈõÜÂèØËÉΩ
        return profile.createdBy === currentUser.email || currentUser.email === 'tomura@hackjpn.com';
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´„ÇíÊõ¥Êñ∞
    updateProfile(id, updatedData) {
        const index = this.profiles.findIndex(p => p.id === id);
        if (index !== -1) {
            this.profiles[index] = {
                ...this.profiles[index],
                ...updatedData,
                updatedAt: new Date().toISOString()
            };
            this.saveProfiles();
            return this.profiles[index];
        }
        throw new Error('„Éó„É≠„Éï„Ç£„Éº„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´„Éö„Éº„Ç∏„Çí‰ΩúÊàê
    createProfilePage(profileData) {
        const profile = this.addProfile(profileData);
        
        // „É°„Ç§„É≥„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        this.updateMainProfileList();
        
        return profile;
    }

    // profiles.json„Éï„Ç°„Ç§„É´„ÇíÊõ¥Êñ∞
    updateProfilesJson() {
        const profilesData = this.profiles.map(profile => ({
            id: profile.id,
            name: profile.name,
            englishName: profile.englishName || null,
            age: profile.age || null,
            occupation: profile.occupation,
            location: profile.location || null,
            bio: profile.bio,
            skills: profile.skills || [],
            image: profile.image || this.generateSampleImage(profile.name, this.estimateGender(profile.name)),
            originalPage: `${profile.id}/index.html`
        }));

        const jsonBlob = new Blob([JSON.stringify(profilesData, null, 2)], { type: 'application/json' });
        const jsonUrl = URL.createObjectURL(jsonBlob);
        const jsonLink = document.createElement('a');
        jsonLink.href = jsonUrl;
        jsonLink.download = 'profiles.json';
        document.body.appendChild(jsonLink);
        jsonLink.click();
        document.body.removeChild(jsonLink);
        URL.revokeObjectURL(jsonUrl);
    }

    // „É°„Ç§„É≥„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
    updateMainProfileList() {
        // JavaScript„ÅßÂãïÁöÑ„Å´„Éó„É≠„Éï„Ç£„Éº„É´„Ç´„Éº„Éâ„ÇíËøΩÂä†
        this.addToProfileGrid();
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´„Ç∞„É™„ÉÉ„Éâ„Å´Êñ∞„Åó„ÅÑ„Éó„É≠„Éï„Ç£„Éº„É´„ÇíËøΩÂä†
    addToProfileGrid() {
        // „Éõ„Éº„É†„Éö„Éº„Ç∏„Å´„Éó„É≠„Éï„Ç£„Éº„É´„ÇíËøΩÂä†
        if (typeof window !== 'undefined' && window.location.pathname.includes('index.html')) {
            this.refreshProfileGrid();
        }
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´„Ç∞„É™„ÉÉ„Éâ„Çí„É™„Éï„É¨„ÉÉ„Ç∑„É•
    refreshProfileGrid() {
        const profilesGrid = document.getElementById('profilesGrid');
        if (profilesGrid) {
            // Êó¢Â≠ò„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´„Å®Êñ∞„Åó„ÅÑ„Éó„É≠„Éï„Ç£„Éº„É´„ÇíÁµ±Âêà
            const allProfiles = this.getAllProfilesForDisplay();
            profilesGrid.innerHTML = allProfiles.map(profile => this.createProfileCardHTML(profile)).join('');
        }
    }

    // Ë°®Á§∫Áî®„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´„Éá„Éº„Çø„ÇíÂèñÂæó
    getAllProfilesForDisplay() {
        // Êó¢Â≠ò„ÅÆ„Éè„Éº„Éâ„Ç≥„Éº„Éâ„Åï„Çå„Åü„Éó„É≠„Éï„Ç£„Éº„É´
        const existingProfiles = [
            {
                id: "ayaka",
                name: "ÂúíÁî∞ÂΩ©Êéõ",
                englishName: "Ayaka Sonoda",
                age: 23,
                occupation: "Êó©Á®≤Áî∞Â§ßÂ≠¶Â§ßÂ≠¶Èô¢M2",
                location: "Áæ§È¶¨Áúå",
                bio: "„Çπ„Ç≠„ÉºÂêåÂ•Ω‰ºöÊâÄÂ±û„ÄÇÊØç„ÅÆ‰π≥„Åå„Çì‰ΩìÈ®ì„Çí„Åç„Å£„Åã„Åë„Å´„ÄÅÊÇ£ËÄÖÊßò„Å®„Åù„ÅÆÂÆ∂Êóè„ÇíÊîØ„Åà„ÇãÂåªÁôÇ„ÅÆÈáçË¶ÅÊÄß„ÇíÂÆüÊÑü„ÄÇÊú™Êù•„ÅÆMR„ÇíÁõÆÊåá„Åó„Å¶Êó•„ÄÖÂ≠¶Áøí‰∏≠„ÄÇ",
                skills: ["„Çπ„Ç≠„ÉºÔºàÁâπ„Å´„Ç≥„ÉñÔºâ", "„Éë„É≥„Éª„ÅäËèìÂ≠ê‰Ωú„Çä", "„Éú„É©„É≥„ÉÜ„Ç£„Ç¢Ê¥ªÂãï", "ÊïôËÇ≤ÊîØÊè¥", "ÂåªÁôÇÁü•Ë≠ò"],
                image: "ayaka/profile.jpg",
                originalPage: "ayaka/index.html",
                createdBy: "tomura@hackjpn.com",
                createdByName: "Êà∏ÊùëÂÖâ",
                createdAt: "2024-01-15T10:00:00.000Z"
            },
            {
                id: "chika",
                name: "‰∏äÊûó„Å°„Åã",
                englishName: "Chika Kambayashi",
                occupation: "„Éó„É´„Éá„É≥„Ç∑„É£„É´ÁîüÂëΩ „É©„Ç§„Éï„Éó„É©„É≥„Éä„Éº",
                location: "Êù±‰∫¨",
                bio: "„ÅäÂÆ¢Êßò‰∏Ä‰∫∫„Å≤„Å®„Çä„Å´ÊúÄÈÅ©„Å™‰øùÈöúË®≠Ë®à„Çí„ÅîÊèêÊ°à„ÄÇJCÊ¥ªÂãï„Å´„ÇÇÁ©çÊ•µÁöÑ„Å´ÂèÇÂä†„Åó„ÄÅÂú∞ÂÖÉ„Å∏„ÅÆË≤¢ÁåÆ„Å®‰∫∫ÈñìÁöÑÊàêÈï∑„ÇíÁõÆÊåá„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
                skills: ["„É©„Ç§„Éï„Éó„É©„É≥„Éã„É≥„Ç∞", "‰øùÈô∫Ë®≠Ë®à", "ÂïèÈ°åËß£Ê±∫", "JCÊ¥ªÂãï", "È°ßÂÆ¢ÂØæÂøú", "„É™„Çπ„ÇØÂàÜÊûê"],
                originalPage: "chika/index.html",
                createdBy: "tomura@hackjpn.com",
                createdByName: "Êà∏ÊùëÂÖâ",
                createdAt: "2024-01-20T14:30:00.000Z"
            },
            {
                id: "hikaru",
                name: "Êà∏ÊùëÂÖâ",
                englishName: "Hikaru Tomura",
                age: 30,
                occupation: "ÈÄ£Á∂öËµ∑Ê•≠ÂÆ∂„ÉªForbesÂÖ¨Âºè„Ç≥„É©„É†„Éã„Çπ„Éà",
                location: "„Ç∑„É™„Ç≥„É≥„Éê„É¨„Éº/Êù±‰∫¨",
                bio: "20Ê≠≥„Åß„Ç∑„É™„Ç≥„É≥„Éê„É¨„Éº„Å´„Å¶HACKJPN„ÇíÂâµÊ•≠„ÄÇ„Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„Éó„Å®ÊäïË≥áÂÆ∂„ÅÆ„Åü„ÇÅ„ÅÆÈù©Êñ∞ÁöÑ„Å™„Éá„Éº„Çø„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„ÇíÊèê‰æõ„ÄÇForbesÂÖ¨Âºè„Ç≥„É©„É†„Éã„Çπ„Éà„Å®„Åó„Å¶Ê¥ªÂãï„ÄÇ",
                skills: ["Ëµ∑Ê•≠", "ÊäïË≥á", "AI/Ê©üÊ¢∞Â≠¶Áøí", "„É°„Éá„Ç£„Ç¢Âü∑Á≠Ü", "„Éá„Éº„ÇøÂàÜÊûê", "„Éì„Ç∏„Éç„ÇπÊà¶Áï•"],
                originalPage: "hikaru/index.html",
                createdBy: "tomura@hackjpn.com",
                createdByName: "Êà∏ÊùëÂÖâ",
                createdAt: "2024-01-10T09:15:00.000Z"
            }
        ];

        // Êñ∞„Åó„Åè‰ΩúÊàê„Åï„Çå„Åü„Éó„É≠„Éï„Ç£„Éº„É´„ÇíËøΩÂä†
        const newProfiles = this.profiles.map(profile => ({
            ...profile,
            image: profile.image || this.generateSampleImage(profile.name, this.estimateGender(profile.name)),
            originalPage: null // Êñ∞„Åó„ÅÑ„Éó„É≠„Éï„Ç£„Éº„É´„ÅØHTML„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åï„Çå„Çã„Åü„ÇÅ
        }));

        return [...existingProfiles, ...newProfiles];
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´„Ç´„Éº„Éâ„ÅÆHTML„ÇíÁîüÊàê
    createProfileCardHTML(profile) {
        const gender = this.estimateGender(profile.name);
        const sampleImage = this.generateSampleImage(profile.name, gender);
        // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„ÅüÁîªÂÉè„Åå„ÅÇ„Çå„Å∞„Åù„Çå„Çí‰ΩøÁî®„ÄÅ„Å™„Åë„Çå„Å∞„Çµ„É≥„Éó„É´ÁîªÂÉè
        const imageUrl = profile.image || sampleImage;
        
        const englishName = profile.englishName ? 
            `<div class="profile-english">${profile.englishName}</div>` : '';
        
        const age = profile.age ? `${profile.age}Ê≠≥` : '';
        const location = profile.location ? ` ‚Ä¢ ${profile.location}` : '';
        
        const skillsHtml = profile.skills && profile.skills.length > 0 ? 
            `<div class="profile-skills">
                <span class="skills-label">„Çπ„Ç≠„É´„ÉªÂ∞ÇÈñÄÂàÜÈáé</span>
                <div class="skills-list">
                    ${profile.skills.map(skill => `<span class="skill-tag">${skill}</span>`).join('')}
                </div>
            </div>` : '';
        
        const clickHandler = profile.originalPage ? 
            `onclick="window.open('${profile.originalPage}', '_blank')"` : 
            `onclick="window.open('profile-view.html?id=${profile.id}', '_blank')"`;

        // Á∑®ÈõÜÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
        const canEdit = this.canEditProfile(profile);
        const editButtonHTML = (canEdit && !profile.originalPage) ? 
            `<button onclick="event.stopPropagation(); editProfile('${profile.id}')" style="background: #667eea; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 0.8rem; margin-left: 8px;">Á∑®ÈõÜ</button>` : '';

        // Fallback image generation for onerror
        const fallbackImage = generatePlaceholder(300, 300, '#cccccc', '#ffffff', profile.name.substring(0, 2));
        
        return `
            <div class="profile-card" ${clickHandler}>
                <div class="profile-header">
                    <img src="${imageUrl}" alt="${profile.name}" class="profile-image" 
                         onerror="this.src='${fallbackImage}'">
                    <div class="profile-info">
                        <h3>${profile.name}</h3>
                        ${englishName}
                        <div class="profile-occupation">${profile.occupation || 'ËÅ∑Ê•≠‰∏çÊòé'}${age}${location}</div>
                    </div>
                </div>
                <div class="profile-bio">${this.truncateText(profile.bio || 'Ë©≥Á¥∞ÊÉÖÂ†±„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ', 150)}</div>
                ${skillsHtml}
                <div class="profile-meta">
                    <span style="color: #666;">üë§ ${profile.createdByName || profile.createdBy || '‰∏çÊòé'}</span>
                    ${editButtonHTML}
                </div>
            </div>
        `;
    }

    // ÊÄßÂà•Êé®ÂÆöÈñ¢Êï∞
    estimateGender(name) {
        const maleNames = ['Â§™ÈÉé', '‰∏ÄÈÉé', '‰∫åÈÉé', 'ÂÖâ', 'ÂÅ•', 'Ë™†', 'Ê¥ã', 'Âçö', 'ÈõÑ', 'Áî∑', 'Â§´', 'ÂΩ¶'];
        const femaleNames = ['Â≠ê', 'Áæé', 'ÊÅµ', 'È¶ô', 'Â•à', 'Ëèú', 'Ëä±', 'ËèØ', 'ÊÑõ', 'ÂΩ©', 'Âí≤', '„Å°„Åã', '„ÅÇ„ÇÑ„Åã'];
        
        for (let male of maleNames) {
            if (name.includes(male)) return 'male';
        }
        for (let female of femaleNames) {
            if (name.includes(female)) return 'female';
        }
        return 'unknown';
    }

    // „Çµ„É≥„Éó„É´ÁîªÂÉèURLÁîüÊàê
    generateSampleImage(name, gender) {
        const colors = ['#667eea', '#764ba2', '#4CAF50', '#2196F3', '#ff6b6b', '#ffa726'];
        const color = colors[Math.floor(Math.random() * colors.length)];
        
        let icon = gender === 'male' ? 'M' : gender === 'female' ? 'F' : 'U';
        const text = icon + ' ' + name;
        
        // Use local placeholder generator
        return generatePlaceholder(300, 300, color, '#ffffff', text);
    }

    // „ÉÜ„Ç≠„Çπ„Éà„ÇíÊåáÂÆöÊñáÂ≠óÊï∞„ÅßÂàá„ÇäË©∞„ÇÅ„Çã
    truncateText(text, maxLength) {
        if (!text) return '';
        if (text.length <= maxLength) return text;
        
        // Êñá„ÅÆÂ¢ÉÁïå„ÅßÂàá„ÇäË©∞„ÇÅ„ÇíË©¶„Åø„Çã
        const truncated = text.substring(0, maxLength);
        const lastSentenceEnd = Math.max(
            truncated.lastIndexOf('„ÄÇ'),
            truncated.lastIndexOf('ÔºÅ'),
            truncated.lastIndexOf('Ôºü')
        );
        
        if (lastSentenceEnd > maxLength * 0.6) {
            return text.substring(0, lastSentenceEnd + 1);
        }
        
        return truncated + '...';
    }

    // ÂÖ®„Éó„É≠„Éï„Ç£„Éº„É´„ÇíÂèñÂæó
    getAllProfiles() {
        return this.profiles;
    }

    // „Éó„É≠„Éï„Ç£„Éº„É´„ÇíÂâäÈô§
    deleteProfile(id) {
        this.profiles = this.profiles.filter(p => p.id !== id);
        this.saveProfiles();
    }
}

// „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ
window.profileGenerator = new ProfileGenerator();